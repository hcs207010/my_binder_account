{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Structured Types\n",
    "\n",
    "\n",
    "So far in this class, we have looked at `int`, `float` and `str` types of objects. We note that of these, `int` and `float` have no internal structure. On the other hand, `str` *does* have internal structure. As a sequence, it is possible to iterate over it, use indexing and slicing operations to extract individual elements or sub-strings.\n",
    "\n",
    "\n",
    "However, there are other structured types that are far more powerful than the ones we have seen so far. In today's class we will discuss some of these types.\n",
    "\n",
    "\n",
    "## Tuple\n",
    "\n",
    "Tuples are immutabe ordered sequences of elements. However, we have great freedom in defining what those elements are- they need not be characters like strings. Like strings, tuples are immutable.\n",
    "\n",
    "Tuples can be represented as comma-separated list of elements\n",
    "\n",
    "```python\n",
    "\n",
    "t1=()        # an empty tuple\n",
    "t2=(1,)      # a one-item tuple (comma differentiates it from other expressions in parantheses)\n",
    "t3=(1, 'hello', 9) #a three item tuple\n",
    "\n",
    "```\n",
    "\n",
    "Common operations used with strings can also be used with tuples e.g. indexing and slicing, as well as concatenation and repetition.\n",
    "```\n",
    "t2[i]\n",
    "t2[i:j]\n",
    "t2+t3\n",
    "t2*3\n",
    "```\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 1, 1)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t1=()        # an empty tuple\n",
    "t2=(1,)      # a one-item tuple (comma differentiates it from other expressions in parantheses)\n",
    "t3=(1, 'hello', 9) #a three item tuple\n",
    "\n",
    "\n",
    "#t3[1]\n",
    "#t3[1:3]\n",
    "#t2+t3\n",
    "#t2*3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "One of the useful properties of a tuple is multiple assignment:-\n",
    "\n",
    "```python\n",
    "x,y= (3,4)\n",
    "\n",
    "a, b, c = (10, 100, 1000)\n",
    "```\n",
    "\n",
    "A tuple can be thought of as a simple association of objects that doesn't change over time. (Lists, which we will come to later, do change over time)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# tuples , like strings are immutable\n",
    "\n",
    "t4= (3, 7, 80, 0, 5)\n",
    "t4[0] = 4\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4, 7, 80, 0, 5)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t4=(3,7,80,0,5)\n",
    "t5=(4,)\n",
    "t5+t4[1:]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Lists\n",
    "\n",
    "A list is an ordered sequence of values where each value is identified by an index. When we express literals of type list, we use *square brackets*\n",
    "\n",
    "```python\n",
    "l1= []    #an empty list\n",
    "l2 =[3]   #a list with a single element\n",
    "l3= [4,5,9,11]  #a list with 4 elements\n",
    "l4=['a','fan','of','books']`\n",
    "\n",
    "```\n",
    "\n",
    "\n",
    "\n",
    "The slicing syntax that is applicable for strings is also used for lists. Lists can also be concatenated and multiplied like strings. \n",
    "\n",
    "Slicing, indexing is also possible with lists. \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "adding 2 lists   ['a', 'fan', 'of', 'books', 'a', 'fan', 'of', 'screens']\n",
      "using indexing   of\n",
      "using slicing    ['a']\n"
     ]
    }
   ],
   "source": [
    "mylist=['a','fan','of','books']\n",
    "mylist2= ['a','fan','of','screens']\n",
    "print('adding 2 lists  ', mylist+mylist2)\n",
    "print('using indexing  ', mylist[2])\n",
    "print('using slicing   ', mylist2[:1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Mutability\n",
    "\n",
    "The important differentiating factor when it comes to lists is that they are **mutable**. \n",
    "\n",
    "The code below will modify the list in-place.\n",
    "\n",
    "```python\n",
    "\n",
    "mylist[0] = 'big'\n",
    "\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['big', 'fan', 'of', 'books']"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mylist[0] ='big'\n",
    "mylist"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Split\n",
    "\n",
    "When we wrote the split function in the previous class, it simply gave us an output in the form of a string. But this is not useful enough to be used anywhere else in the program. Instead, the output in the form of a list, gives is the words separated out into individual elements of a list. Now this can be used for further processing e.g. counting words etc. \n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of times \"God\" appeared  8\n"
     ]
    }
   ],
   "source": [
    "text='''In the beginning God created the heaven and the earth.\n",
    "And the earth was without form, and void; and darkness was upon the face of the deep. And the Spirit of God moved upon the face of the waters.\n",
    "And God said, Let there be light: and there was light.\n",
    "And God saw the light, that it was good: and God divided the light from the darkness.\n",
    "And God called the light Day, and the darkness he called Night. And the evening and the morning were the first day.\n",
    "And God said, Let there be a firmament in the midst of the waters, and let it divide the waters from the waters.\n",
    "And God made the firmament, and divided the waters which were under the firmament from the waters which were above the firmament: and it was so.\n",
    "'''\n",
    "\n",
    "def mySplit(sequence, delim=' '):\n",
    "    \"\"\"Assumes that sequence is a string and delim is a single whitespace by default. \n",
    "    Returns a string with individual elements separated by commas\"\"\"\n",
    "    words=[]\n",
    "    ongoing_word=''\n",
    "        \n",
    "    for element in sequence:\n",
    "        if element == delim:\n",
    "        \n",
    "            words.append(ongoing_word)\n",
    "            \n",
    "            ongoing_word=''\n",
    "        else:\n",
    "            ongoing_word+=element\n",
    "\n",
    "    words.append(ongoing_word)\n",
    "\n",
    "    return words\n",
    "\n",
    "\n",
    "\n",
    "sentences =mySplit(text)\n",
    "#print(sentences)\n",
    "count=0\n",
    "\n",
    "for item in sentences:\n",
    "    item= item.rstrip('\\n')\n",
    "\n",
    "    if item== 'God':\n",
    "        count+=1\n",
    "\n",
    "print('Number of times \\\"God\\\" appeared ', count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Python', 'is', 'named', 'after', 'Monty', 'Python']"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#instead of doing all this, we can just use split()!\n",
    "#the output of split is a list, and it uses delimiters that are whitespace by default- or user specified\n",
    "\n",
    "sentence1 = \"Python is named after Monty Python\"\n",
    "sentence1.split()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that the code above used `append` in order to add items to the list. These are special `list methods` associated with lists only.\n",
    "\n",
    "`l.append()` will add an object to the end of a list.\n",
    "\n",
    "```python\n",
    "mylist= [45,99,7,5,300]\n",
    "mylist.append('tree')\n",
    "mylist\n",
    "```\n",
    "will print\n",
    "```\n",
    "[45, 99, 7, 5, 300, 'tree']\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Buzzing', 'black', 'bumblebees', ['flying', 'fast']]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mylist = ['Buzzing','black','bumblebees']\n",
    "\n",
    "another_list= ['flying','fast']\n",
    "mylist.append(another_list)\n",
    "mylist"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use `l.extend()` as a list method in order to add items in a second list to the first one:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Buzzing', 'black', 'bumblebees', 'flying', 'fast']"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mylist = ['Buzzing','black','bumblebees']\n",
    "another_list= ['flying','fast']\n",
    "\n",
    "mylist.extend(another_list)\n",
    "mylist"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " ## Sorting a list\n",
    "\n",
    "Python's l.sort() method allows for the easy sorting of a list in ascending order by default.\n",
    "\n",
    "Note that this *modifies the list in-place*. We can use it if we do not require the order in the original list. It is possible to provide a *key* parameter to `sort` in order to specify the type of sorting that is required to be done. \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[3.9, 4, 11, 66]\n",
      "[66, 11, 4, 3.9]\n"
     ]
    }
   ],
   "source": [
    "numbers=[11, 66, 4,3.9]\n",
    "numbers.sort()\n",
    "print(numbers)    \n",
    "numbers.sort(reverse=True)\n",
    "print(numbers)    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "An alternative to `l.sort()` is `sorted()`, which sorts the list and returns a new one. Like `l.sort()` this will also take a *key* parameter to specify the type of sorting that is required. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[3.9, 4, 11, 66]"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numbers=[11, 66, 4,3.9]\n",
    "\n",
    "sorted(numbers)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['a', 'Andrew', 'from', 'is', 'string', 'test', 'This']"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted(\"This is a test string from Andrew\".split(), key=str.lower)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Key parameter in sorting\n",
    "\n",
    "The key parameter is quite useful as it can also take a **lambda expression** as its argument. A **lambda expression** is a type of *anonymous* function i.e. it is not bound to a name, and is not callable in the same sense as an ordinary function. \n",
    " \n",
    "The general form of a lambda expression is \n",
    "\n",
    "```python\n",
    "lambda <parameters> : <expression>\n",
    "\n",
    "```\n",
    "\n",
    "This is equivalent to\n",
    "```python\n",
    "def <lambda>(parameters):\n",
    "    return expression\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# below we find a list of tuples, containing information about students\n",
    "\n",
    "student_tuples = [\n",
    "\n",
    "    ('john', 'A', 15),\n",
    "\n",
    "    ('jane', 'B', 12),\n",
    "\n",
    "    ('dave', 'B', 10),\n",
    "\n",
    "]\n",
    "# we can use the lambda expression to sort the list of tuples by age\n",
    "sorted(student_tuples, key=lambda student: student[2])\n",
    "\n",
    "#we can use this to sort the list by name\n",
    "#sorted(student_tuples, key=lambda student: student[0])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
