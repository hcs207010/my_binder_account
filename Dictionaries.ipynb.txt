{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dictionaries\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "Dictionaries are one of the **Mapping** object types and are similar to lists, except that we can index them using **keys**. In other words, we can think of them as a mapping between a set of key-value pairs. A dictionary is represented using **curly** braces and each element is written as key:value. For example:\n",
    "\n",
    "`monthNumbers = {1:'Jan', 2:'Feb',3:'Mar', 4:'Apr', 5:'May'}`\n",
    "\n",
    "We can access each value in a dictionary by means of its *key*. For instance\n",
    "`print(monthNumbers[2])`  \n",
    "\n",
    ".. will print `Feb`.\n",
    "\n",
    "Dictionaries are unordered (more on this below). They are also **mutable** like lists. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#accessing the value by means of the key\n",
    "\n",
    "monthNumbers = {1:'Jan',2:'Feb',3:'Mar',4:'April',5:'May'}\n",
    "\n",
    "\n",
    "\n",
    "monthNumbers[2]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assign a new key-value pair\n",
    "\n",
    "monthNumbers[6] = 'June'\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that unlike sequences such as lists or string, dictionaries are unordered, so it's not possible to access them via an index or using slicing syntax. They are structured via a mapping between key and value. They may only be accessed by their key.\n",
    "\n",
    "Dictionaries are incredibly useful and computationally efficient even though they can contain hundreds of key-value pairs.\n",
    "\n",
    "Here is a toy example of an English to French dictionary. Can you 'translate' I drink red wine into French?\n",
    "\n",
    "```python\n",
    "EtoF = {'bread':'pain', 'wine':'vin', 'with':'avec', 'I':'Je',\n",
    "'eat':'mange', 'drink':'bois', 'John':'Jean',\n",
    "'friends':'amis', 'and': 'et', 'of':'du','red':'rouge'}\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One way to do the translation is one-by-one, i.e. by retrieving the keys from the dictionary one after the other. But it is easier to do this using a loop, where the sentence *I drink red wine* can be stored in a list and a `for` loop iterates through the keys in the list. \n",
    "\n",
    "`if word in EtoF():`  \n",
    "`....print(EtoF[word],`   \n",
    "\n",
    "\n",
    "Note that we can iterate over a dictionary using its keys only. Not its key-value pairs. Membership of the key can be tested using `in` inside a `for` loop.\n",
    "\n",
    "The order in which we iterate over the keys is also not fixed- as dictionaries are unordered."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "EtoF = {'bread':'pain','wine':'vin','with':'avec','I':'Je','eat':'mange','drink':'bois','John':'Jean','friends':'amis'}\n",
    "\n",
    "source_sentence = 'I drink red wine'\n",
    "target_sentence =[]\n",
    "source_sent_tokenized = source_sentence.split()\n",
    "for word in source_sent_tokenized:\n",
    "    if word in EtoF: #this is equivalent to if word in EtoF.keys():\n",
    "        \n",
    "        target_sentence.append(EtoF[word])\n",
    "    #print(EtoF[word])\n",
    "    else:\n",
    "        target_sentence.append(word)\n",
    "\n",
    "print(target_sentence)\n",
    "s= ' '   \n",
    "print(s.join(target_sentence))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# objects of type dict_keys can be iterated over using for. This is a special type of object called a view object\n",
    "\n",
    "EtoF.keys()\n",
    "\n",
    "eng_words=EtoF.keys()\n",
    "list(eng_words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "EtoF.values()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Note that dictionaries cannot have duplicate keys. If we assign a new key similar to an existing one, the old value will get wiped out. Similar to lists, dictionaries are mutable and can be changed in place. \n",
    "\n",
    "`EtoF['wine'] = 'Wein'`  \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "EtoF['wine'] = 'Wein'\n",
    "\n",
    "EtoF\n",
    "\n",
    "#adding a new key-value pair\n",
    "#Etof['music'] = 'musique'\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "\n",
    "Values in a dictionary can be any type of object e.g. a list or even another dictionary. If values are lists, they can be acessed using slicing syntax. \n",
    "\n",
    "`students = {'HS3001':['Mohan',27], 'HS3002': ['Meena',25],'HS3003':['Meera', 26]}`\n",
    "\n",
    "`students['HS3003'][1]`\n",
    "\n",
    "What will this print out? And why?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# a nested dictionary\n",
    "students = {'HS3001':{'Gender':'Male','CGPA':'3.7','Year':\n",
    "                      '2018'}}\n",
    "\n",
    "\n",
    "students['HS3001']['CGPA']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Keys in a Python dictionary have to be **hashable**. *Any mutable object type is not hashable*. Lists cannot be keys.\n",
    "\n",
    "Immutable objects like strings, tuples, ints can be keys. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# a program to get raw frequency counts of words in a corpus\n",
    "\n",
    "tmib = '''A01 There were four of us-George, and William Samuel Harris, and myself, and Montmorency.\n",
    "A01 We were sitting in my room, smoking, and talking about how bad we were-bad from a medical point of view I mean, of course.\n",
    "A01 We were all feeling seedy, and we were getting quite nervous about it.\n",
    "A01 Harris said he felt such extraordinary fits of giddiness come over him at times, that he hardly knew what he was doing; and then George said that he had fits of giddiness too, and hardly knew what he was doing.\n",
    "A01 With me, it was my liver that was out of order.\n",
    "A01 I knew it was my liver that was out of order, because I had just been reading a patent liver-pill circular, in which were detailed the various symptoms by which a man could tell when his liver was out of order.\n",
    "A01 I had them all.'''\n",
    "\n",
    "sentences=tmib.split('\\n')\n",
    "word_count={}\n",
    "for sentence in sentences:\n",
    "    words = sentence[4:].split()\n",
    "    for word in words:\n",
    "        if word in word_count.keys():\n",
    "            word_count[word] +=1\n",
    "        else:\n",
    "            word_count[word] = 1\n",
    "\n",
    "print(word_count)          "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
